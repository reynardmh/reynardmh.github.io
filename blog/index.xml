<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on hilman.io</title>
    <link>https://www.hilman.io/blog/</link>
    <description>Recent content in Blogs on hilman.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Reynard Hilman</copyright>
    <lastBuildDate>Sat, 25 Mar 2017 22:08:05 -0400</lastBuildDate><atom:link href="https://www.hilman.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Test Context Builder</title>
      <link>https://www.hilman.io/blog/2017/03/test-context-builder/</link>
      <pubDate>Sat, 25 Mar 2017 22:08:05 -0400</pubDate>
      
      <guid>https://www.hilman.io/blog/2017/03/test-context-builder/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/reynardmh/test-context-builder&#34;&gt;Test context builder&lt;/a&gt; is an npm package I wrote to
complement &lt;a href=&#34;https://github.com/reynardmh/db-fabricator.js&#34;&gt;db-fabricator&lt;/a&gt;. The main purpose of db-fabricator
is to setup test context data for integration testing. However, setting up test context data gets repetitive and
verbose for each test. In many cases you have the same basic object that most of your tests need. So it would be
nice to be able to define a set of basic contexts that you often use and be able to build on
top of it. This is what &lt;em&gt;test-context-builder&lt;/em&gt; is for.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DB Fabricator 2.0</title>
      <link>https://www.hilman.io/blog/2017/03/db-fabricator-2.0/</link>
      <pubDate>Sun, 12 Mar 2017 17:08:05 -0400</pubDate>
      
      <guid>https://www.hilman.io/blog/2017/03/db-fabricator-2.0/</guid>
      <description>&lt;p&gt;It hasn&amp;rsquo;t been that long since I released DB Fabricator version 1.0. But I quickly realized the limitation as I use it more
on my project. The biggest annoyance is the fact that when you want to fabricate an object that depends on another
fabricated object, you have to fabricate the dependency after resolving the root object promise,
resulting in a somewhat verbose nested code like this:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing DB Fabricator</title>
      <link>https://www.hilman.io/blog/2017/01/db-fabricator/</link>
      <pubDate>Mon, 16 Jan 2017 17:57:41 -0500</pubDate>
      
      <guid>https://www.hilman.io/blog/2017/01/db-fabricator/</guid>
      <description>&lt;p&gt;When writing end to end tests, we often need to set up a context by creating some data in database.
Each test case should start with a clean slate and have data that are created only for that test.
So it&amp;rsquo;s important to make creating these test data as simple as possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Shared Examples in RSpec</title>
      <link>https://www.hilman.io/blog/2016/04/using-shared-examples-in-rspec/</link>
      <pubDate>Tue, 05 Apr 2016 10:53:28 -0400</pubDate>
      
      <guid>https://www.hilman.io/blog/2016/04/using-shared-examples-in-rspec/</guid>
      <description>&lt;p&gt;Shared examples is a great RSpec feature that allows you to reuse test cases in different context.
One use case is when you need to test different access level to a resource depending on the role.
Lets say you have a resource that can have published/draft state. There are several roles with
different access level to this resource.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Helper to print out your ActiveRecord SQL</title>
      <link>https://www.hilman.io/blog/2016/03/helper-print-out-activerecord-sql/</link>
      <pubDate>Tue, 15 Mar 2016 19:56:54 -0400</pubDate>
      
      <guid>https://www.hilman.io/blog/2016/03/helper-print-out-activerecord-sql/</guid>
      <description>&lt;p&gt;Sometime you just want to see the SQL statement that your ActiveRecord magically generate, without going through hundreds of lines in your log file. An easy way to do that is to assign the &lt;code&gt;ActiveRecord::Base.logger&lt;/code&gt; to a new &lt;code&gt;Logger&lt;/code&gt; that prints to the &lt;code&gt;STDOUT&lt;/code&gt;, and then change it back to the old logger so it doesn&amp;rsquo;t keep printing out SQL for the rest of your code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ruby Tempfile and Garbage Collection</title>
      <link>https://www.hilman.io/blog/2016/01/tempfile/</link>
      <pubDate>Sun, 31 Jan 2016 21:07:34 -0500</pubDate>
      
      <guid>https://www.hilman.io/blog/2016/01/tempfile/</guid>
      <description>&lt;p&gt;Tempfile gives you an easy way to quickly create a temporary file without having to worry about generating a file name that doesnâ€™t already exist and cleaning up the file after you are done. However, you have to be aware that the temporary file will be deleted when the tempfile instance is garbage collected.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to test file upload with Grape Framework</title>
      <link>https://www.hilman.io/blog/2016/01/how-to-test-file-upload-grape/</link>
      <pubDate>Thu, 28 Jan 2016 23:26:39 -0500</pubDate>
      
      <guid>https://www.hilman.io/blog/2016/01/how-to-test-file-upload-grape/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Grape&lt;!-- raw HTML omitted --&gt; is a Rack based Ruby framework for building API.
It&amp;rsquo;s only a few years old and has not reached version 1.0 yet. The main github page has a very good documentation but
is still not as complete as Rails guide. In this post, I will discuss how to test file upload endpoint with RSpec.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stop using backtick to run shell command in Ruby</title>
      <link>https://www.hilman.io/blog/2016/01/stop-using-backtick-to-run-shell-command-in-ruby/</link>
      <pubDate>Sat, 23 Jan 2016 13:56:39 -0500</pubDate>
      
      <guid>https://www.hilman.io/blog/2016/01/stop-using-backtick-to-run-shell-command-in-ruby/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s all too common to find the use of backtick to run shell command from Ruby. It&amp;rsquo;s fine when you just run a command that doesn&amp;rsquo;t take any user input. But when you start passing input from untrusted source, that&amp;rsquo;s when the trouble begins.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Comparing ancestry and closure_tree for your nested data structure</title>
      <link>https://www.hilman.io/blog/2015/09/comparing-ancestry-and-closure_tree/</link>
      <pubDate>Sun, 13 Sep 2015 23:41:00 -0400</pubDate>
      
      <guid>https://www.hilman.io/blog/2015/09/comparing-ancestry-and-closure_tree/</guid>
      <description>&lt;p&gt;When it comes to implementing &lt;!-- raw HTML omitted --&gt;ActiveRecord nesting&lt;!-- raw HTML omitted --&gt;, there are a few popular implementations. In this post I will look closer at how &lt;!-- raw HTML omitted --&gt;Ancestry&lt;!-- raw HTML omitted --&gt; and &lt;!-- raw HTML omitted --&gt;Closure tree&lt;!-- raw HTML omitted --&gt; work and what the pros and cons are.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What you need to know about gitignore pattern</title>
      <link>https://www.hilman.io/blog/2015/09/what-you-need-to-know-about-gitignore/</link>
      <pubDate>Mon, 07 Sep 2015 20:15:26 -0400</pubDate>
      
      <guid>https://www.hilman.io/blog/2015/09/what-you-need-to-know-about-gitignore/</guid>
      <description>&lt;p&gt;After using git for a long time, I thought I knew the basic of gitignore well enough, until I ran into problem with my files not getting committed. There were some basic gitignore patterns that most git users are just not aware of. So some of us might have put something on gitignore without realizing that it does ignore a lot more stuff than we intend.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
